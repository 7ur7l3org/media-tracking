"media tracker" is what the open source community calls this stuff

vcs/files/mirroring, single web dashboard with efficient search, offline, tracking things not in any database (yet?) like youtube stuff and genshin stuff

watchlist(s) with upvoting per entry
watch history easy to find and filter and see from the main page, multiple watches easily visible

directly links to all main database sources, e.g. https://yamtrack.fuzzygrim.com/details/tmdb/movie/38/eternal-sunshine-of-the-spotless-mind does that well. yamtrack is also just fast and pretty

https://github.com/bonukai/MediaTracker is a good starting point..

yamtrack has the best url api and has movies/anime/tv, but terrible actual tracking
mediatracker has better actual tracking and is simpler
yamtrack doesn't have unified search
yamtrack doesn't have history and stats are shoddy


music/books/games are kinda future stuff.. e.g. maloja/pano-scrobbler is future integration
    https://github.com/krateng/maloja is great for music tracking and https://github.com/kawaiiDango/pano-scrobbler scrobbles to it. probably the best ui in general but unclear where metadata is sourced

databases:
- mal, tvdb, tmdb/omdb/etc, good reads, yt music, wikipedia, and reverse links via tampermonkey for all those sites to this tracker

openlibrary does not show series information..

out-links to streaming sites e.g. private description custom metadata information
or integration with *arr and stremio and such.. providers..

set up jellyseerr and such
https://github.com/Radarr/Radarr
https://old.reddit.com/r/selfhosted/comments/18c0vqr/dont_fully_understand_use_of_radarr/
https://wiki.servarr.com/
prowlarr manages torrent trackers


random gpt suggestions. mostly can find anything from just a https://www.wikidata.org/wiki/Wikidata:Main_Page search
Movies	Wikidata QID	TMDb ID → IMDb ID → TVDb ID
TV Shows	Wikidata QID	TVDb ID → TMDb ID → IMDb ID
Anime	Wikidata QID	AniDB ID → MyAnimeList ID → AniList ID
Books	Wikidata QID	Open Library ID → WorldCat ID → Goodreads ID → ISBN .. or honestly annas archive md5 lol or whatever keys their metadata
Music	Wikidata QID	MusicBrainz ID → Discogs ID
Video Games	Wikidata QID	GiantBomb ID → IGDB ID → Steam App ID

just link to all authoritative sources somewhere to find stuff if wikidata fails

https://sqid.toolforge.org/#/view?id=Q11678&lang=en sqid is sick



okay so idea is more or less wikidata etc search frontend over a few autocommitted (use offline git fs thing for mobile) json files, watch history by id/time where future id's are a superset of all past watch history, and watchlist votes by id/time where future entries are a superset of all watchlist votes. maybe time to learn graphql? when offline or in general allows generic keys to be used temporarily or permanently and then updated with the actual more authoritative links when there's a connection. probably easiest is to enter a url and have it auto-suggest the keys
actually i think i want just all watch history and all watchlist vote history in files that point only to the key, and then entries for keys are backreferenced all watches or watchlist votes alongside notes and added links and such, so everything is always fully connected. add everything ever viewed too and backreferenced to a viewed list json
call it consumed or queued/enlisted instead of watched/watchlist to be more generic to all media
make it capture ctrl+v on the page to take you to the page for that content, or on /<url> that can pick it up by that url so you just put t.7ur.it/<blah> in front of whatever
this might be possible to be ran entirely client side... esp if it has proper git view of the data backend or otherwise filesystem access to the repo. that would be super ideal cause then i could just put it on 7ur.it without hosting anything lol. maybe auth like organice

---

<future>

then integrate subtitle databases and stremio search stuff on top of custom descriptions for links temporarily. tho possibly autogen search links for thepiratebay etc with the multiple names reported by wikidata idk, there's probably a solution for that already though. tho also just links to streaming stuff maintained would be nice too. some kinda prototype page info data thing that is always there

then set up or integrate maloja/pano-scrobbler for music too to start capturing that data, esp with lyrics database for search

then make it have links to spin up a web sync play thing for a stream in one click :)

then make it also pull youtube and tick tock watch history and saves...

then make it integrate with *arr and trackers

then add custom bookmarks/wiki pages for stuff like anime summer 2025 and such maybe

<now>

thanks https://chatgpt.com/c/679d3064-16b0-800c-9e35-89509164697b (trying o3-mini)

first make website that links to wikidata and can pull wikidata given wikidata url/id
then make it render all the id links of the content and maybe preview the images and save to media
then make it able to work with the four json files of consumed/enlisted/media/viewed/searched
then make it work with isomorphic-git
then make it work by id or url of external stuff
then make it import from trakt or do that manually idk and see what is missing and was or wasn't able to link

cline with deepseek?


-- make the search be above the fetch and include buttons for each search result to do the fetch for them directly
-- at the top of the fetch data let's include all the Identifiers with each of the IDs and links to each of them, or at least comprehensively display everything that https://www.wikidata.org/wiki/Q116032682 would. maybe also log the sparql and response to the javascript console too so it's more clear exactly what's happening.
-- property descriptions
-- make url query parameters to auto-search a term or auto-fetch by qid on page load -> ?q= or ?id=
-- separate out css and make everything font monospace
-- instead of hardcoding any random identifier mappings, we should automatically use the `formatter URL (P1630)` of any property that has one to hyperlink the value to the url that is constructed from the value
-- make property values such as `	{"entity-type":"item","numeric-id":18665344,"id":"Q18665344"}` human readable
-- make ID in Property (ID) hyperlink to the wikidata page for that property e.g. `instance of (P31)` should make P31 hyperlink to `https://www.wikidata.org/wiki/Property:P31`
-- make value show the human readable version of it when it is a wikidata thing. e.g. `instance of (P31):	Q11424` has Q11424 hyperlinked to https://www.wikidata.org/wiki/Q11424 which shows `film (Q11424) sequence of images that give the impression of movement, stored on film stock` which would be good to display
-- render properties for relevant groups of interest, e.g. group `Wikidata property for items about films (Q22965162)` first, `Wikidata property to identify films (Q29542094)` second, and all other misc properties after that. the property groups should have headers indicating what they are
-- remove full json response from page
-- hitting enter when on the search or fetch info boxes should submit the button query
-- revisit using ordinals for sorting instead of the complicated algorithm probably
-- sequencing information issues:
    - on a movie, works great
    - on the movie film series, doesn't render any information even though e.g. `X (Q114451788)` is a `film series (Q24856)`. we should be able to grab all the `part of the series (P179)` parts of that series. this is working when on a movie in the series, but doesn't work when on the series itself for some reason
    - on a tv series, works mostly great, but the sorting of the collapsed episodes in e.g. `Episodes grouped by season: Season: House, season 1 (Q166042)` don't properly topologically sort. it shows `Paternity (Q2666662): episode of House (S1 E2)` first and `Pilot (Q615483): episode of House` third from last even though the pilot is followed by Paternity and Paternity follows Pilot
    - on a tv season (or on an episode), sees that it's `Series: House (Q23558) (part of series, P179)` but then renders `Parts of this series (via P179)` all episodes and seasons all together in one big list instead of properly rendering like it does when we're on the tv series itself. all series rendering should render equivalently no matter which element of the sequencing tree we are on. also the `Direct sequencing statements` don't get rendered for the seasons even though they have e.g. `part of the series: House (series ordinal 1, follows no value, followed by House, season 2)`
    - also i notice there are `series ordinal (P1545)`s for each of the `has part(s) (P527)` of the seasons, so we can probably directly render and use those for sorting if they exist (otherwise falling back to topological sorting is probably fine)
-- we stopped loading styles.css at some point

- the property value names broke in a lot of cases for some reason e.g. it renders `Q6371282 (Q6371282)` instead of `House (TV series) (Q6371282)`
- need to make the search paginated so we can search more results or next/previous 7 etc. should probably search 10 results at a time for now
- should display (loading) or something in the Fetch results section if it is currently loading or doing the fetch
- should make the search section collapsable and default to collapsed unless we aren't doing a fetch (like ?id= isn't triggering a direct fetch) and the search is the first thing we are doing. should collapse when fetching
- when we update the url we aren't editing the navigation history and we should be making a new navigation history entry every time we write the url so that e.g. back properly goes back
- we should also put the title and qid in the page title whenever we fetch so that the navigation history shows what pages we were on
- should link to [sqid] in addition to [wikidata] and should link to ourselves via ?id= as the primary link for all wikidata links
- refactor into files that are more maintainable separation of concerns so that we can update smaller files instead of updating one huge file
- we should e.g. expand season 2 if we're fetching the information for season 2 in the series/sequencing information parts tree. currently it underlines itself in the tree but doesn't expand it to show the episodes in it
- there are some `series of creative works (Q7725310)` which give `No parts found for this series.` but we can pull everything that is `part of the series (P179)` part of that series, and those things do still have their series ordinal. e.g. a missing `has part(s) (P527)` forward reference should not imply the lack of existing series/ordinal back-linkages
- somehow make copy paste on the series/sequencing information section retain the section/subsection indentation



- interesting duplication issue in the recursive parts series/sequencing view. not sure what to do about this lol
6. House, season 6 (Q169042) – season of television series
    1. Broken (Q2504180) – joint title for the first and second episodes of the sixth season of the television series House
        1. Broken (Part One) (Q6094328) – episode of House (S6 E1)
        2. Broken (Part Two) (Q29415041) – episode of House (S6 E2)
    1. Broken (Part One) (Q6094328) – episode of House (S6 E1)
    2. Broken (Q2504180) – joint title for the first and second episodes of the sixth season of the television series House
        1. Broken (Part One) (Q6094328) – episode of House (S6 E1)
        2. Broken (Part Two) (Q29415041) – episode of House (S6 E2)
    2. Broken (Part Two) (Q29415041) – episode of House (S6 E2)
    3. Epic Fail (Q13479269) – episode of House (S6 E3)

- not sure what this is coming from:
{
    "error": {
        "code": "toomanyvalues",
        "info": "Too many values supplied for parameter \"ids\". The limit is 50.",
        "parameter": "ids",
        "limit": 50,
        "lowlimit": 50,
        "highlimit": 500,
        "*": "See https://www.wikidata.org/w/api.php for API usage. Subscribe to the mediawiki-api-announce mailing list at &lt;https://lists.wikimedia.org/postorius/lists/mediawiki-api-announce.lists.wikimedia.org/&gt; for notice of API deprecations and breaking changes."
    },
    "servedby": "mw-api-ext.codfw.main-85f4f7c798-mgkvs"
}